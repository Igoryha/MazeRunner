//  Раскомментируйте для программной реализации шины I2C:   //
//  #define pin_SW_SDA 3                                    // Назначение любого вывода Arduino для работы в качестве линии SDA программной шины I2C.
//  #define pin_SW_SCL 9                                    // Назначение любого вывода Arduino для работы в качестве линии SCL программной шины I2C.
//  Раскомментируйте для совместимости с большинством плат: //
//  #include <Wire.h>                                       // Библиотека iarduino_Position_BMX055 будет использовать методы и функции библиотеки Wire.
//  Ссылки для ознакомления:                                //
//  Подробная информация о подключении модуля к шине I2C:   // http://wiki.iarduino.ru/page/i2c_connection/
//  Подробная информация о функциях и методах библиотеки:   // http://wiki.iarduino.ru/page/Trema_IMU9/
                                                            //
/* ЧТЕНИЕ КВАТЕРНИОНОВ */                                   // 
                                                            //
#define BMX055_DISABLE_BMM                                  // Не использовать магнитометр. Курс будет ориентирован на начальное положение модуля
#include <iarduino_Position_BMX055.h>                       // Подключаем библиотеку iarduino_Position_BMX055 для работы с Trema-модулем IMU 9 DOF.
iarduino_Position_BMX055 sensor(BMX);                       // Создаём объект sensor указывая что требуется работать со всеми датчиками модуля.
                                                            // Если указать параметр BMA - то объект будет работать только с акселерометром.
                                                            // Если указать параметр BMG - то объект будет работать только с гироскопом.
                                                            // Если указать параметр BMM - то объект будет работать только с магнитометром.
                                                            // Если указать параметр BMX - то объект будет работать со всеми датчиками сразу.
void setup(){                                               // 
     Serial.begin(9600);                                    // Инициируем передачу данных в монитор последовательного порта на скорости 9600 бит/сек.
     while(!Serial){}                                       // Ждём готовность Serial к передаче данных в монитор последовательного порта.
     sensor.begin();                                        // Инициируем работу с датчиками объекта sensor.
}                                                           //
void loop(){                                                //
     sensor.read();                                         // Функция read() читает данные того датчика, для которого был создан объект.
                                                            // В данном скетче параметр функции read() не имеет ни какого значения, так как
                                                            // он влияет только на единицы измерений данных в переменных axisX, axisY, axisZ.
    Serial.print(sensor.q1);                                // Выводим кватернион q1.
    Serial.print(",");                                      // разделяем запятой.
    Serial.print(sensor.q2);                                // Выводим кватернион q2.
    Serial.print(",");                                      // разделяем запятой.
    Serial.print(sensor.q3);                                // Выводим кватернион q3.
    Serial.print(",");                                      // разделяем запятой.
    Serial.println(sensor.q4);                              // Выводим кватернион q4 и завершаем строку.
}                                                           //
