//  Раскомментируйте для программной реализации шины I2C:   //
//  #define pin_SW_SDA 3                                    // Назначение любого вывода Arduino для работы в качестве линии SDA программной шины I2C.
//  #define pin_SW_SCL 9                                    // Назначение любого вывода Arduino для работы в качестве линии SCL программной шины I2C.
//  Раскомментируйте для совместимости с большинством плат: //
//  #include <Wire.h>                                       // Библиотека iarduino_Position_BMX055 будет использовать методы и функции библиотеки Wire.
//  Ссылки для ознакомления:                                //
//  Подробная информация о подключении модуля к шине I2C:   // http://wiki.iarduino.ru/page/i2c_connection/
//  Подробная информация о функциях и методах библиотеки:   // http://wiki.iarduino.ru/page/Trema_IMU9/
                                                            //
/* САМОТЕСТИРОВАНИЕ ДАТЧИКОВ МОДУЛЯ */                      // 
                                                            //
#include <iarduino_Position_BMX055.h>                       // Подключаем библиотеку iarduino_Position_BMX055 для работы с Trema-модулем IMU 9 DOF.
iarduino_Position_BMX055 sensor(BMX);                       // Создаём объект sensor указывая параметр BMX - требуется работать со всеми датчиками модуля.
                                                            // Если указать параметр BMA - то объект будет работать только с акселерометром.
                                                            // Если указать параметр BMG - то объект будет работать только с гироскопом.
                                                            // Если указать параметр BMM - то объект будет работать только с магнитометром.
                                                            // Если указать параметр BMX - то объект будет работать со всеми датчиками сразу.
void setup(){                                               // 
     Serial.begin(9600);                                    // Инициируем передачу данных в монитор последовательного порта на скорости 9600 бит/сек.
     while(!Serial){}                                       // Ждём готовность Serial к передаче данных в монитор последовательного порта.
     Serial.println("Тест модуля ...");                     // Выводим надпись в монитор последовательного порта.
     sensor.begin();                                        // Инициируем работу с датчиками объекта sensor.
     switch(sensor.test()){                                 // Получаем результат самотестирования для его сравнения с указанными ниже константами.
         case 0:          Serial.println("Аппаратное самотестирование всех датчиков успешно пройдено!"); break;
         case BMA_ERR_ID: Serial.println("Акселерометр не найден.");                                     break;
         case BMG_ERR_ID: Serial.println("Гироскоп не найден.");                                         break;
         case BMM_ERR_ID: Serial.println("Магнитометр не найден.");                                      break;
         case BMA_ERR_ST: Serial.println("Акселерометр не прошел самотестирование.");                    break;
         case BMG_ERR_ST: Serial.println("Гироскоп не прошел самотестирование.");                        break;
         case BMM_ERR_ST: Serial.println("Магнитометр не прошел самотестирование.");                     break;
         default:         Serial.println("Модуль не прошел самотестирование по неизвестной причине.");   break;
     }                                                      //
}                                                           //
void loop(){}                                               //
