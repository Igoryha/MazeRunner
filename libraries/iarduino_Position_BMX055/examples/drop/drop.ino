//  Раскомментируйте для программной реализации шины I2C:   //
//  #define pin_SW_SDA 3                                    // Назначение любого вывода Arduino для работы в качестве линии SDA программной шины I2C.
//  #define pin_SW_SCL 9                                    // Назначение любого вывода Arduino для работы в качестве линии SCL программной шины I2C.
//  Раскомментируйте для совместимости с большинством плат: //
//  #include <Wire.h>                                       // Библиотека iarduino_Position_BMX055 будет использовать методы и функции библиотеки Wire.
//  Ссылки для ознакомления:                                //
//  Подробная информация о подключении модуля к шине I2C:   // http://wiki.iarduino.ru/page/i2c_connection/
//  Подробная информация о функциях и методах библиотеки:   // http://wiki.iarduino.ru/page/Trema_IMU9/
                                                            //
/* ОПРЕДЕЛЕНИЕ ПАДЕНИЯ МОДУЛЯ */                            // Не рекомендуем использовать данный скетч для падения модуля на твёрдые предметы )))
                                                            //
#include <iarduino_Position_BMX055.h>                       // Подключаем библиотеку iarduino_Position_BMX055 для работы с Trema-модулем IMU 9 DOF.
iarduino_Position_BMX055 sensor(BMX);                       // Создаём объект sensor указывая что требуется работать со всеми датчиками модуля.
                                                            // Если указать параметр BMA - то объект будет работать только с акселерометром.
                                                            // Если указать параметр BMG - то объект будет работать только с гироскопом.
                                                            // Если указать параметр BMM - то объект будет работать только с магнитометром.
                                                            // Если указать параметр BMX - то объект будет работать со всеми датчиками сразу.
void setup(){                                               // 
     Serial.begin(9600);                                    // Инициируем передачу данных в монитор последовательного порта на скорости 9600 бит/сек.
     while(!Serial){}                                       // Ждём готовность Serial к передаче данных в монитор последовательного порта.
     sensor.begin();                                        // Инициируем работу с датчиками объекта sensor.
}                                                           //
void loop(){                                                //
     sensor.read(BMX_M_S);                                  // Функция read() читает данные того датчика, для которого был создан объект.
                                                            // Для объекта работающего со всеми датчиками сразу, функция read() может принять
                                                            // один из трёх параметров: BMX_DEG, BMX_RAD, или BMX_M_S. Если параметра нет, то используется параметр по умолчанию.
                                                            // sensor.read(BMX_DEG); - читать углы Эйлера в градусах (по умолчанию).
                                                            // sensor.read(BMX_RAD); - читать углы Эйлера в радианах.
                                                            // sensor.read(BMX_M_S); - читать истинное ускорение в м/с².
                                                            // Данные прочитанные функцией read() сохраняются в переменных axisX, axisY, axisZ и temp.
     float absX=abs(sensor.axisX);                          // Получаем проекцию вектора истинного ускорения на ось X по модулю
     float absY=abs(sensor.axisY);                          // Получаем проекцию вектора истинного ускорения на ось Y по модулю
     float absZ=abs(sensor.axisZ);                          // Получаем проекцию вектора истинного ускорения на ось Z по модулю
     float absXYZ=absX+absY+absZ;                           // Получаем величину истинного ускорения вне зависимости от направления падения модуля
                                                            //     
     if(absXYZ>9.5f){                                       // Если истинное ускорение модуля приближается к ускорению свободного падения, то ...
        if(absX>absY){                                      // Если модуль проекции по оси X больше модуля проекции по оси Y значит модуль падает вдоль оси X или Z
           if(absX>absZ){Serial.println(" Я падаю по оси X");}
           else         {Serial.println(" Я падаю по оси Z");}
        }else{                                              // Иначе, модуль падает вдоль оси Y или Z
           if(absY>absZ){Serial.println(" Я падаю по оси Y");}
           else         {Serial.println(" Я падаю по оси Z");}
        }                                                   //
     }                                                      //
}                                                           //
